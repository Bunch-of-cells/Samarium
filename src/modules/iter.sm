find array target * {
    index: \;
    ? array?! :: ""?! {
        .. index + target$ <: array$ {
            ? array<<index..index+target$>> :: target {
                * index;
            }
            index+: /;
        }
    } ,, {
        ... e ->? array {
            ? e :: target { * index; }
            index+: /;
        }
    }
    * -/;
}

count array target * {
    <-math.sum;
    ? target ~~ ->? array { * \; }
    * sum([/ ... e ->? array ? e :: target]);
}

filter array function * {
    * [e ... e ->? array ? function(e)];
}

filterFalse array function * {
    flip arg * { * ~~ function(arg); }
    * filter(array, flip);
}

map array function * {
    * [function(e) ... e ->? array];
}

reverse array * {
    o: [];
    i: array$ - /;
    .. i >: \ {
        o+: [array<<i>>];
        i-: /;
    }
    * o;
}

takeWhile array function * {
    o: [];
    ... e ->? array {
        ? function(e) {
            o+: [e];
            ->
        }
        <-
    }
    * o;
}

dropWhile array function * {
    o: [];
    i: \;
    ... e ->? array {
        i+: /;
        ? ~~ function(e) {
            o+: [e];
            <-
        }
    }
    ... e ->? array<<i..array$>> {
        o+: e;
    }
    * o;
}

accumulate array function * {
    prev: array<<\>>;
    o: [array<<\>>];
    ... e ->? array<</..>> {
        prev: function(prev, e);
        o+: [prev];
    }
    * o;
}

reduce array function * {
    * accumulate(array, function)<<-/>>;
}

enumerate array * {
    o: [];
    i: \;
    ... e ->? array {
        o+: [[i, e]];
        i+: /;
    }
    * o;
}

range start stop:_ step:/ * {
    ? step :: \ {
        "step cannot be zero"!!!;
    }
    ? _ :: stop {
        stop: start;
        start: \;
    }
    o: [];
    .. (step < \) ^ (start < stop) {
        o+: [start];
        start+: step;
    }
    ? step < \ && o {
        o-: -/;
    }
    * o;
}

sort array * {
    ? array$ <: / { * array; }
    <-collections.Stack;
    l: \;
    h: array$ - /;
    stack: Stack(h + /);
    stack.push(l);
    stack.push(h);
    .. stack {
        h: stack.pop();
        l: stack.pop();
        x: array<<h>>;
        i: l - /;
        j: l;
        .. j < h {
            ? array<<j>> <: x {
                i+: /;
                t: array<<j>>;
                array<<j>>: array<<i>>;
                array<<i>>: t;
            }
            j+: /;
        }
        t: array<<h>>;
        array<<h>>: array<<i+/>>;
        array<<i+/>>: t;
        p: i + /;
        ? p - / > l {
            stack.push(l);
            stack.push(p - /);
        }
        ? p + / < h {
            stack.push(p + /);
            stack.push(h);
        }
    }
    * array;
}
