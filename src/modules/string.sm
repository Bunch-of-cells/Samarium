<-iter.range;

uppercase : "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
lowercase : "abcdefghijklmnopqrstuvwxyz";
letters : uppercase + lowercase;

octdigits : "01234567";
digits : octdigits + "89";
hexdigits : digits + "abcdef";

punctuation : "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
whitespace : " \t\n\r\f\v";

printable : letters + digits + punctuation + whitespace;

center string length char:" " * {
    ? char$ > / {
        "char has to be of length 1"!!!;
    }
    index : \;
    .. string$ < length {
        ? index {
            string : char + string;
        } ,, {
            string +: char;
        }
        index +: /;
        index ---: /\;
    }
    * string;
}

startsWith string prefix * {
    ? prefix$ > string$ { * \; }
    ? prefix :: string { * /; }
    * string<<..prefix$>> :: prefix;
}

endsWith string suffix * {
    ? suffix$ > string$ { * \; }
    ? suffix :: string { * /; }
    * string<<-suffix$..>> :: suffix;
}

split string delimiter:" " * {
    ? delimiter ~~ ->? string {
        * [string];
    }
    out : [];
    temp : "";
    ... char ->? string {
        ? char :: delimiter {
            out +: [temp];
            temp : "";
        } ,, {
            temp +: char;
        }
    }
    out +: [temp];
    * out;
}

capitalize string * {
    * toUpper(string<<\>>) + string<</..>>;
}

title string * {
    * join(capitalize(w) ... w ->? split(string));
}

join iterable delimiter:" " * {
    o : "";
    ... e ->? iterable {
        o +: e;
        o +: delimiter;
    }
    o : o<<..-delimiter$>>;
    * o;
}

stripLeft string prefix * {
    .. startsWith(string, prefix) {
        string : string<<prefix$..>>;
    }
    * string;
}

stripRight string suffix * {
    .. endsWith(string, suffix) {
        string : string<<..-suffix$>>;
    }
    * string;
}

strip string chars * {
    * stripLeft(stripRight(string, chars), chars);
}

isWrapped string chars * {
    * startsWith(string, chars) && endsWith(string, chars);
}

toLower string * {
    ? string?! ::: "String" {
        "Invalid type: " + string?!!!!;
    }
    out : "";
    ... char ->? string {
        ? char% ->? range(/\\\\\/, /\//\/\) {
            out +: (char% + /\\\\\)%;
        } ,, {
            out +: char;
        }
    }
    * out;
}

toUpper string * {
    ? string?! ::: "String" {
        "Invalid type: " + string?!!!!;
    }
    out : "";
    ... char ->? string {
        ? char% ->? range(//\\\\/, ////\/\) {
            out +: (char% - /\\\\\)%;
        } ,, {
            out +: char;
        }
    }
    * out;
}

isUpper string * {
    * string :: toUpper(string);
}

isLower string * {
    * string :: toLower(string);
}

isTitle string * {
    * string :: title(string);
}

isCapitalized string * {
    * string :: capitalize(string);
}

isInGroup string group * {
    ... char ->? string {
        ? char ~~->? group { * \; }
    }
    * /;
}

isAlphabetic string * {
    * isInGroup(string, letters);
}

isAlphanumeric string * {
    * isInGroup(string, letters + digits);
}

isDecimal string * {
    * isInGroup(string, digits);
}

isOctal string * {
    * isInGroup(string, octdigits);
}

isHexadecimal string * {
    * isInGroup(string, hexdigits);
}